CLASS ba net/minecraft/util/NumberRange
	CLASS ba$a Factory
	CLASS ba$c FloatRange
		FIELD e ANY Lba$c;
		FIELD f minSquared Ljava/lang/Double;
		FIELD g maxSquared Ljava/lang/Double;
		METHOD a matchesSquared (D)Z
		METHOD a fromJson (Lcom/google/gson/JsonElement;)Lba$c;
		METHOD a parse (Lcom/mojang/brigadier/StringReader;)Lba$c;
		METHOD a create (Lcom/mojang/brigadier/StringReader;Ljava/lang/Float;Ljava/lang/Float;)Lba$c;
		METHOD a parse (Lcom/mojang/brigadier/StringReader;Ljava/util/function/Function;)Lba$c;
		METHOD a squared (Ljava/lang/Float;)Ljava/lang/Double;
		METHOD b atLeast (F)Lba$c;
		METHOD d matches (F)Z
	CLASS ba$d IntRange
		FIELD e ANY Lba$d;
		FIELD f minSquared Ljava/lang/Long;
		FIELD g maxSquared Ljava/lang/Long;
		METHOD a exactly (I)Lba$d;
		METHOD a fromJson (Lcom/google/gson/JsonElement;)Lba$d;
		METHOD a parse (Lcom/mojang/brigadier/StringReader;)Lba$d;
		METHOD a fromStringReader (Lcom/mojang/brigadier/StringReader;Ljava/util/function/Function;)Lba$d;
		METHOD a squared (Ljava/lang/Integer;)Ljava/lang/Long;
		METHOD b atLeast (I)Lba$d;
		METHOD d test (I)Z
	FIELD a EXCEPTION_EMPTY Lcom/mojang/brigadier/exceptions/SimpleCommandExceptionType;
	FIELD b EXCEPTION_SWAPPED Lcom/mojang/brigadier/exceptions/SimpleCommandExceptionType;
	FIELD c min Ljava/lang/Number;
	FIELD d max Ljava/lang/Number;
	METHOD a getMin ()Ljava/lang/Number;
	METHOD a fromJson (Lcom/google/gson/JsonElement;Lba;Ljava/util/function/BiFunction;Lba$a;)Lba;
	METHOD a isNextCharValid (Lcom/mojang/brigadier/StringReader;)Z
	METHOD a parse (Lcom/mojang/brigadier/StringReader;Lba$b;Ljava/util/function/Function;Ljava/util/function/Supplier;Ljava/util/function/Function;)Lba;
	METHOD a fromStringReader (Lcom/mojang/brigadier/StringReader;Ljava/util/function/Function;Ljava/util/function/Supplier;)Ljava/lang/Number;
	METHOD a applyIfNonNull (Ljava/lang/Object;Ljava/util/function/Function;)Ljava/lang/Object;
	METHOD b getMax ()Ljava/lang/Number;
	METHOD c isDummy ()Z
	METHOD d serialize ()Lcom/google/gson/JsonElement;
